// <auto-generated />
using System;
using MeteorFlow.FormBuilder.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeteorFlow.FormBuilder.Migrations
{
    [DbContext(typeof(FormDbContext))]
    partial class FormDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.ElementSchemas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Autocomplete")
                        .HasColumnType("boolean")
                        .HasColumnName("autocomplete");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_date");

                    b.Property<int>("InputType")
                        .HasColumnType("integer")
                        .HasColumnName("input_type");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<bool>("Searchable")
                        .HasColumnType("boolean")
                        .HasColumnName("searchable");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_element_schemas");

                    b.ToTable("element_schemas", (string)null);
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormBlocks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Append")
                        .HasColumnType("text")
                        .HasColumnName("append");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("element_id");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text")
                        .HasColumnName("placeholder");

                    b.Property<string>("Prepend")
                        .HasColumnType("text")
                        .HasColumnName("prepend");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("Tooltip")
                        .HasColumnType("text")
                        .HasColumnName("tooltip");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.HasKey("Id")
                        .HasName("pk_form_blocks");

                    b.HasIndex("ElementId")
                        .HasDatabaseName("ix_form_blocks_element_id");

                    b.ToTable("form_blocks", (string)null);
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormElements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Renderer")
                        .HasColumnType("text")
                        .HasColumnName("renderer");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("schema_id");

                    b.HasKey("Id")
                        .HasName("pk_form_elements");

                    b.HasIndex("SchemaId")
                        .HasDatabaseName("ix_form_elements_schema_id");

                    b.ToTable("form_elements", (string)null);
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormBlocks", b =>
                {
                    b.HasOne("MeteorFlow.FormBuilder.Entities.FormElements", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_blocks_form_elements_element_id");

                    b.Navigation("Element");
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormElements", b =>
                {
                    b.HasOne("MeteorFlow.FormBuilder.Entities.ElementSchemas", "Schema")
                        .WithMany()
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_elements_element_schemas_schema_id");

                    b.Navigation("Schema");
                });
#pragma warning restore 612, 618
        }
    }
}
