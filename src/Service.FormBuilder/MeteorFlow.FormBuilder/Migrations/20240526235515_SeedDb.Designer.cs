// <auto-generated />
using System;
using MeteorFlow.FormBuilder.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeteorFlow.FormBuilder.Migrations
{
    [DbContext(typeof(FormDbContext))]
    [Migration("20240526235515_SeedDb")]
    partial class SeedDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.ElementSchemas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Autocomplete")
                        .HasColumnType("boolean")
                        .HasColumnName("autocomplete");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_date");

                    b.Property<int>("InputType")
                        .HasColumnType("integer")
                        .HasColumnName("input_type");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<bool>("Searchable")
                        .HasColumnType("boolean")
                        .HasColumnName("searchable");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_element_schemas");

                    b.ToTable("element_schemas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d75ee8c-5565-4374-98aa-06d0785e9460"),
                            Autocomplete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InputType = 2,
                            Name = "name",
                            ReadOnly = false,
                            Required = true,
                            Searchable = true,
                            Type = "text"
                        },
                        new
                        {
                            Id = new Guid("6ccc1efb-4054-4ace-8fdf-47346bbe6809"),
                            Autocomplete = true,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InputType = 3,
                            Name = "weather_type",
                            ReadOnly = false,
                            Required = true,
                            Searchable = true,
                            Type = "choice"
                        });
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormBlocks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Append")
                        .HasColumnType("text")
                        .HasColumnName("append");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("element_id");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text")
                        .HasColumnName("placeholder");

                    b.Property<string>("Prepend")
                        .HasColumnType("text")
                        .HasColumnName("prepend");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("schema_id");

                    b.Property<string>("Tooltip")
                        .HasColumnType("text")
                        .HasColumnName("tooltip");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.HasKey("Id")
                        .HasName("pk_form_blocks");

                    b.HasIndex("ElementId")
                        .HasDatabaseName("ix_form_blocks_element_id");

                    b.HasIndex("SchemaId")
                        .HasDatabaseName("ix_form_blocks_schema_id");

                    b.ToTable("form_blocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b732e89-af2f-4793-a234-45c9dac1f590"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DisplayName = "Tiêu đề",
                            ElementId = new Guid("e7db0667-58e4-406f-b8f8-cbe7925a7778"),
                            Name = "title",
                            Order = 0,
                            SchemaId = new Guid("1d75ee8c-5565-4374-98aa-06d0785e9460"),
                            VersionId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("a3232fd5-64e5-464a-9ae3-fcab5d906818"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DisplayName = "Khẩn cấp",
                            ElementId = new Guid("e7db0667-58e4-406f-b8f8-cbe7925a7778"),
                            Name = "emergency",
                            Order = 0,
                            SchemaId = new Guid("1d75ee8c-5565-4374-98aa-06d0785e9460"),
                            VersionId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("0d3007aa-d3e4-4562-8532-a3d17a95d4fc"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DisplayName = "Nội dung",
                            ElementId = new Guid("e7db0667-58e4-406f-b8f8-cbe7925a7778"),
                            Name = "content",
                            Order = 0,
                            SchemaId = new Guid("1d75ee8c-5565-4374-98aa-06d0785e9460"),
                            VersionId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("68f49837-8a4e-4294-9df2-091068c01795"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DisplayName = "Ngày gửi thông báo",
                            ElementId = new Guid("e7db0667-58e4-406f-b8f8-cbe7925a7778"),
                            Name = "notificationDate",
                            Order = 0,
                            SchemaId = new Guid("1d75ee8c-5565-4374-98aa-06d0785e9460"),
                            VersionId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormElements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Renderer")
                        .HasColumnType("text")
                        .HasColumnName("renderer");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_form_elements");

                    b.ToTable("form_elements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7db0667-58e4-406f-b8f8-cbe7925a7778"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Single line text input",
                            Icon = "",
                            Name = "Text input",
                            Renderer = "CoreTextField"
                        },
                        new
                        {
                            Id = new Guid("ea98ca53-bb87-485d-8aa9-750adaa9f89e"),
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Plain checkout input",
                            Icon = "i-mdi-checkbox-outline",
                            Name = "Choice input",
                            Renderer = "CoreSelect"
                        });
                });

            modelBuilder.Entity("MeteorFlow.FormBuilder.Entities.FormBlocks", b =>
                {
                    b.HasOne("MeteorFlow.FormBuilder.Entities.FormElements", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_blocks_form_elements_element_id");

                    b.HasOne("MeteorFlow.FormBuilder.Entities.ElementSchemas", "Schema")
                        .WithMany()
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_blocks_element_schemas_schema_id");

                    b.Navigation("Element");

                    b.Navigation("Schema");
                });
#pragma warning restore 612, 618
        }
    }
}
